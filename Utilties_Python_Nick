{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Utilties_Python_Nick","provenance":[{"file_id":"https://github.com/nick253/PythonUtilities/blob/master/Copy_of_Welcome_To_Colaboratory.ipynb","timestamp":1575873178408}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pYTnU3Y_lNnk","colab_type":"text"},"source":["Python Utilities by Nick Brady"]},{"cell_type":"code","metadata":{"id":"dbTMUVFicZ2H","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":135},"outputId":"ba85d6a8-dcfa-4096-9066-caa13597a579","executionInfo":{"status":"error","timestamp":1575940836594,"user_tz":420,"elapsed":912,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Machine Learning\n","##---------------------------\n","## To start Python ML-Agents Training for Unity\n","## Run \n","conda activate ml-agents \n","##from the ml-agents directory in the unity project with anaconda shell\n","#1 \n","conda activate ml-agents\n","## To start the training run the below command. Make sure the Control Checkbox is checked\n","#2 \n","mlagents-learn config/trainer_config.yaml --run-id=firstRun --train\n","## --load to continue training a pre-existing model\n","\n","## This will not run here. It is for running in the anaconda promp for Unity ML-Agents Training"],"execution_count":2,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-ddff80268c95>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    conda activate ml-agents\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"id":"jK7hT8g4Y64X","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wmFNCc61Zkk0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":124},"outputId":"ba0de34b-ebd6-4a39-8515-f1a62f828881","executionInfo":{"status":"ok","timestamp":1575941002845,"user_tz":420,"elapsed":445,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Lists\n","## -------------\n","## This is how you create and append to a list\n","mylist = []\n","mylist.append(1)\n","mylist.append(2)\n","mylist.append(7)\n","print(mylist[0]) # prints 1\n","print(mylist[1]) # prints 2\n","print(mylist[2]) # prints 7\n","\n","# prints out the entire contents of a list which in this case is 1,2,7 using a for loop\n","for x in mylist:\n","    print(x)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["1\n","2\n","7\n","1\n","2\n","7\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xURcGCCCZk82","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":178},"outputId":"20d2730a-40da-41c8-a9e1-4bb08cf74ae6","executionInfo":{"status":"ok","timestamp":1575944047952,"user_tz":420,"elapsed":454,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Math\n","##------------------\n","##These are a variouse assortment of useful Python Math functions and tricks\n","## Math Squared and Cubed\n","squared = 7 ** 2\n","cubed = 2 ** 3\n","print(squared)\n","print(cubed)\n","\n","## Multiplication\n","multiply = 7 * 11\n","print(multiply)\n","\n","## Python allows us to multiplying strings to form a string with a repeating sequence:\n","lotsofbarks = \"woof \" * 10\n","print(lotsofbarks)\n","\n","## You can even add lists together combining them\n","even_numbers = [2,4,6,8]\n","odd_numbers = [1,3,5,7]\n","all_numbers = odd_numbers + even_numbers\n","print(all_numbers)\n","\n","## We can duplicate the contents of an array to form a much larger array by multipying it.\n","print([1,2,3] * 3)\n","\n","## the NOT operator\n","print(not False) # Prints out True\n","print((not False) == (False)) # Prints out False\n","\n","seconds_in_a_day = 24 * 60 * 60\n","print(seconds_in_a_day)\n","\n","## 7 days multiplied by Seconds in day calculated above.\n","seconds_in_a_week = 7 * seconds_in_a_day \n","print(seconds_in_a_week)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["49\n","8\n","woof woof woof woof woof woof woof woof woof woof \n","[1, 3, 5, 7, 2, 4, 6, 8]\n","[1, 2, 3, 1, 2, 3, 1, 2, 3]\n","True\n","False\n","86400\n","604800\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0rGXGNWEZlMm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":142},"outputId":"44c3e95c-08b5-4942-afa0-5829e60402fb","executionInfo":{"status":"ok","timestamp":1575945441234,"user_tz":420,"elapsed":476,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Strings\n","## ---------------\n","## This section includes an assortment of String Formatting and Manipulation functions, examples, and tricks\n","## This is how to use string variables\n","data = (\"John\", \"Doe\", 53.44)\n","format_string = \"Hello %s %s. Your current balance is $%\"\n","\n","## Counts how many 'l's are in the string\n","astring = \"Hello Boise State!\"\n","print(astring.count(\"l\"))\n","\n","## Prints a section of a string\n","astring = \"Hello Boise State!\"\n","print(astring.count(\"l\"))\n","\n","## toUpper toLower\n","astring = \"Hello Boise State!\"\n","print(astring.upper()) ## Changes entire string to uppercase\n","print(astring.lower()) ## Changes entire string to lowercase\n","\n","## This is how to use the 'in' operator to check if a string can be found within a larger string.\n","name = \"John\"\n","if name in [\"John\", \"Nick\", \"Chad\"]:\n","    print(\"Your name is either John or Rick or Chad.\")\n","age = 23\n","if name == \"John\" and age == 23:\n","    print(\"Your name is John, and you are also 23 years old.\")\n","\n","## Secret String Messages\n","secretMessage = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\n","# prints all the uppercase letters in s, one at a time decoding the message\n","for char in secretMessage:\n","    if char.isupper():\n","        print(char, end='')  "],"execution_count":15,"outputs":[{"output_type":"stream","text":["2\n","2\n","HELLO BOISE STATE!\n","hello boise state!\n","Your name is either John or Rick or Chad.\n","Your name is John, and you are also 23 years old.\n","HELLO"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7FAb-XZAZlSU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":446},"outputId":"c3d89b74-33b6-4ff0-871f-e6dd82412984","executionInfo":{"status":"ok","timestamp":1575942192116,"user_tz":420,"elapsed":459,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Loops\n","##-----------------\n","## This section contains examples on while and for loops\n","## For Loops\n","primes = [2, 3, 5, 7]\n","for prime in primes:\n","    print(prime)\n","    \n","\n","## While Loop with breaks and continues\n","# Prints out 0,1,2,3,4\n","    count = 0\n","while True:\n","    print(count)\n","    count += 1\n","    if count >= 5:\n","        break\n","\n","# Prints out only odd numbers - 1,3,5,7,9\n","for x in range(10):\n","    # Check if x is even\n","    if x % 2 == 0:\n","        continue\n","    print(x)\n","    \n","    \n","## Example of a loop with an else statement\n","# Prints out 0,1,2,3,4 and then it prints \"count value reached 5\"\n","count=0\n","while(count<5):\n","    print(count)\n","    count +=1\n","else:\n","    print(\"count value reached %d\" %(count))\n","\n","# Prints out 1,2,3,4\n","for i in range(1, 10):\n","    if(i%5==0):\n","        break\n","    print(i)\n","else:\n","    print(\"this is not printed because for loop is terminated because of break but not due to fail in condition\")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["2\n","3\n","5\n","7\n","0\n","1\n","2\n","3\n","4\n","1\n","3\n","5\n","7\n","9\n","0\n","1\n","2\n","3\n","4\n","count value reached 5\n","1\n","2\n","3\n","4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Qq6oRYivhr4p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"outputId":"685938dd-5bf5-442a-bddb-f35481308b19","executionInfo":{"status":"ok","timestamp":1575945604439,"user_tz":420,"elapsed":523,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Variables\n","##--------------------\n","\n","## Variable Types\n","myInt = 7\n","print(myInt)\n","\n","myDouble = 7.0\n","print(myDouble)\n","\n","myfloat = float(7)\n","print(myfloat)\n","\n","## Two types of Numbers Integers and Floats\n","\n","myString = \"Hello BSU!\"\n","print(myString);\n","\n","\n"],"execution_count":18,"outputs":[{"output_type":"stream","text":["7\n","7.0\n","7.0\n","Hello BSU!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p1if6CEnY9M4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":135},"outputId":"aff462ec-0e6a-432e-940c-c0f5a0928f53","executionInfo":{"status":"error","timestamp":1575947199223,"user_tz":420,"elapsed":520,"user":{"displayName":"Nick Brady","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBn2vOxK0se2svj2kcCKLLTOZS_bwCirC_0zEWz=s64","userId":"16635985476244193931"}}},"source":["## Pandas\n","##-----------------\n","import pandas as pd\n","\n","## This is how you would setup a dataframe with two Header cells and 1 row of quantities\n","## fruits = pd.DataFrame({'Apples': [30], 'Bananas': [21]})\n","\n","## This is an example of how you would create a series assigned to a variable\n","ingredients = pd.Series(['4 cups', '1 cup', '2 large', '1 can'], index=['Flour', 'Milk', 'Eggs', 'Spam'], name='Dinner')\n","​\n","print(ingredients)\n","\n","## This is an example of how you can read from a file into a dataframe\n","reviews = pd.read_csv(\"../input/wine-reviews/winemag-data_first150k.csv\", index_col=0)\n","​## to use this replace the filepath with the filepath to your .csv file.\n","print(reviews)\n","\n","## Saving to file example here\n","## first we create a dataframe with some data avout animals\n","animals = pd.DataFrame({'Cows': [12, 20], 'Goats': [22, 19]}, index=['Year 1', 'Year 2'])\n","animals\n","\n","## Use the .to_csv() to save to disk as a csv file.\n","animals.to_csv('cows_and_goats.csv')\n","\n","## describe() this method generates a summary of the given collomn attributes\n","## example\n","reviews.points.describe()\n","\n","## .unique to view all unique values\n","\n","## reviews.dtypes - this returns the datatype of every colomn\n","\n","\n"],"execution_count":27,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-27-35cffa1635a6>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    ​\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"]}]},{"cell_type":"code","metadata":{"id":"TdCR481bY9VS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}